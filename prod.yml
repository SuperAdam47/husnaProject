version: '3.7'

services:
  nginx:
    volumes:
      - static_volume:/home/ubuntu/web/static
      - media_volume:/home/ubuntu/web/media
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    restart: always
    networks:
      - microservice_network
  web:
    build:
      context: .
      dockerfile: docker/prod/web/Dockerfile
    entrypoint: /entrypoint.sh
    volumes:
      - static_volume:/home/ubuntu/web/static
      - media_volume:/home/ubuntu/web/media
    expose:
      - 8000
    environment:
      - USE_HTTPS=0
    env_file:
      - docker/prod/env/.env
      - docker/prod/env/.db.env
      - docker/prod/env/.data.env
    depends_on:
      - db
      - redis
    restart: always
    networks:
      - microservice_network
      - separated_network
    healthcheck:
      test: curl --fail -s http://localhost:8000$$HEALTH_CHECK_URL || exit 1
      interval: 1m30s
      timeout: 3s
      retries: 3
  celery:
    build:
      context: .
      dockerfile: docker/prod/web/Dockerfile
    command: celery -A src worker -l info -Q celery
    env_file:
      - docker/prod/env/.env
      - docker/prod/env/.db.env
      - docker/prod/env/.data.env
    depends_on:
      - redis
    restart: always
    networks:
      - separated_network
  db:
    image: postgres:13.2-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - docker/prod/env/.db.env
    restart: always
    networks:
      - separated_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:6.0.1-alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - separated_network
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 1m20s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  microservice_network:
    driver: bridge
  separated_network:
    driver: bridge
